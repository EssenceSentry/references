Automatically generated by Mendeley Desktop 1.19.4
Any changes to this file will be lost if it is regenerated by Mendeley.

BibTeX export options can be customized via Options -> BibTeX in Mendeley Desktop

@article{Wiegley2017,
abstract = {Correctness and performance are ooen at odds in the of sys-tems engineering, either because correct programs are too costly to write or impractical to execute, or because well-performing code involves so many tricks of the trade that formal analysis is unable to isolate the main properties of the algorithm. As a prime example of this tension, Coq is an established proof environment that allows writing correct, dependently-typed code, but it has been criticized for exorbitant development times, forcing the developer to choose between optimal code or tractable proofs. On the other side of the divide, Haskell has proven itself to be a capable, well-typed programming environment, yet easy-to-read, straightforward code must all too ooen be replaced by highly opti-mized variants that obscure the author's original intention. paper builds on the existing Fiat reenement framework to bridge this divide, demonstrating how to derive a correct-by-construction implementation that meets (or exceeds) the perfor-mance characteristics of highly optimized Haskell, starting from a high-level Coq speciication. To achieve this goal, we extend Fiat with a stateful notion of reenement of abstract data types and add support for extracting stateful code via a free monad equipped with an algebra of heap-manipulating operations. As a case study, we reimplement a subset of the popular bytestring library, with liile to no loss of performance, while retaining a high guarantee of program correctness.},
author = {Wiegley, John and Delaware, Benjamin},
doi = {10.1145/3156695.3122962},
isbn = {9781450351829},
issn = {03621340},
journal = {ACM SIGPLAN Notices},
keywords = {2017,Performant Certified Software,Stepwise Refinement,acm reference format,acm sigplan international haskell,correct haskell,delaware,fast and,in proceedings of 10th,john wiegley and benjamin,performant certified software,stepwise refinement,using coq to write},
number = {10},
pages = {52--62},
title = {{Using Coq to write fast and correct Haskell}},
volume = {52},
year = {2017}
}
